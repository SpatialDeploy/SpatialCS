#pragma kernel main

#include "UnityCG.cginc"

#define WORKGROUP_SIZE_X 8
#define WORKGROUP_SIZE_Y 8

#define EPSILON 0.0001

//-------------------------//

RWTexture2D<float4> u_outTexture;
uint2 u_outTextureDims;

float4x4 u_model;
float4x4 u_invModel;
float4x4 u_invView;
float4x4 u_invProj;

uint3 u_volumeSize;
StructuredBuffer<uint> u_voxelBitmap;
StructuredBuffer<uint> u_voxelData;

Texture2D<float4> u_srcDepthTexture;
Texture2D<float4> u_srcColorTexture;
SamplerState sampleru_srcColorTexture;
SamplerState sampleru_srcDepthTexture;

//-------------------------//

float2 intersect_aabb(float3 boxMin, float3 boxMax, float3 rayPos, float3 invRayDir)
{
	float3 tMin = (boxMin - rayPos) * invRayDir;
	float3 tMax = (boxMax - rayPos) * invRayDir;

	float3 t1 = min(tMin, tMax);
	float3 t2 = max(tMin, tMax);

	float tNear = max(max(t1.x, t1.y), t1.z);
	float tFar = min(min(t2.x, t2.y), t2.z);

	return float2(tNear, tFar);
}

float3 background_color(float2 uv)
{
	return u_srcColorTexture.SampleLevel(sampleru_srcColorTexture, uv, 0).xyz;
}

//-------------------------//

bool in_bounds(uint3 pos)
{
	return pos.x < u_volumeSize.x && pos.y < u_volumeSize.y && pos.z < u_volumeSize.z;
}

bool voxel_exists(uint3 pos)
{
	uint idx = pos.x + u_volumeSize.x * (pos.y + u_volumeSize.y * pos.z);
	uint arrIdx = idx / 32;
	uint bitIdx = idx % 32;

	return (u_voxelBitmap[arrIdx] & (1u << bitIdx)) != 0;
}

float3 get_voxel_color(uint3 pos)
{
	uint idx = pos.x + u_volumeSize.x * (pos.y + u_volumeSize.y * pos.z);
	uint packedColor = u_voxelData[idx];

	uint r = (packedColor >> 24) & 0xFF;
	uint g = (packedColor >> 16) & 0xFF;
	uint b = (packedColor >> 8) & 0xFF;

	return float3((float)r / 255.0, (float)g / 255.0, (float)b / 255.0);
}

struct IntersectVolumeOut
{
	bool hit;
	float3 color;
	float3 hitPos;
};

//simple DDA voxel traversal algorithm
//http://www.cse.yorku.ca/~amana/research/grid.pdf
//https://www.shadertoy.com/view/4dX3zl
IntersectVolumeOut intersect_volume(float3 rayPos, float3 rayDir, float3 invRayDir)
{
	rayPos *= float3(u_volumeSize);

	uint3 mapPos = uint3(floor(rayPos));
	float3 deltaDist = abs(invRayDir);
	int3 step = int3(sign(rayDir));
	float3 sideDist = (sign(rayDir) * (float3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist;
	float3 lastSideDist = float3(0.0, 0.0, 0.0);

	bool hit = false;
	while(in_bounds(mapPos))
	{
		if(voxel_exists(mapPos))
		{
			hit = true;
			break;
		}

		lastSideDist = sideDist;

		if(sideDist.x < sideDist.y)
		{
			if(sideDist.x < sideDist.z)
			{
				sideDist.x += deltaDist.x;
				mapPos.x += (uint)step.x;
			}
			else
			{
				sideDist.z += deltaDist.z;
				mapPos.z += (uint)step.z;
			}
		}
		else
		{
			if(sideDist.y < sideDist.z)
			{
				sideDist.y += deltaDist.y;
				mapPos.y += (uint)step.y;
			}
			else
			{
				sideDist.z += deltaDist.z;
				mapPos.z += (uint)step.z;
			}
		}
	}

	IntersectVolumeOut retval;
	retval.hit = hit;

	if(hit)
	{
		retval.color = get_voxel_color(mapPos);

		float3 hitPos = rayPos + rayDir * min(min(lastSideDist.x, lastSideDist.y), lastSideDist.z);
		hitPos /= float3(u_volumeSize);
		retval.hitPos = hitPos;
	}
	else
	{
		retval.color = float3(0.0, 0.0, 0.0);
		retval.hitPos = float3(0.0, 0.0, 0.0);
	}

	return retval;
}

//-------------------------//

[numthreads(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
    //skip pixels out of texture bounds (happens due to workgroup size):
	//---------------
    uint2 writePos = id.xy;
    if(writePos.x >= u_outTextureDims.x || writePos.y >= u_outTextureDims.y)
        return;

    //generate ray pos + dir:
	//---------------
    float2 pixelCenter = float2((float)writePos.x, (float)writePos.y) + float2(0.5, 0.5);
    float2 uv = pixelCenter / float2(u_outTextureDims);
	float2 d = uv * 2.0 - 1.0;

	float4 rayPos4 = mul(u_invView, float4(0.0, 0.0, 0.0, 1.0));
	float4 rayTarget = mul(u_invProj, float4(d.x, d.y, 1.0, 1.0));

	float4 rayDir4 = mul(u_invView, float4(normalize(rayTarget.xyz), 0.0));

	float3 rayPos = rayPos4.xyz;
	float3 rayDir = normalize(rayDir4.xyz);

	//transform raypos and raydir to local space:
	//---------------
	float3 rayPosWorld = rayPos;

	float4x4 modelNoTranslate = u_invModel;
	modelNoTranslate[0][3] = 0.0;
	modelNoTranslate[1][3] = 0.0;
	modelNoTranslate[2][3] = 0.0;

	rayPos = mul(u_invModel, float4(rayPos, 1.0)).xyz;
	rayDir = mul(modelNoTranslate, float4(rayDir, 1.0)).xyz;
	float3 invRayDir = 1.0 / rayDir;

	//check for intersection with bounding cube:
	//---------------
    uint maxSize = max(max(u_volumeSize.x, u_volumeSize.y), u_volumeSize.z);
	float3 volumeMin = -float3(u_volumeSize) / (float)maxSize / 2.0;
	float3 volumeMax =  float3(u_volumeSize) / (float)maxSize / 2.0; 

	float2 intersect = intersect_aabb(volumeMin, volumeMax, rayPos, invRayDir);

    //trace ray through volume (TODO):
	//---------------    
    float3 color;
    if(intersect.x > intersect.y || intersect.y < 0.0)
        color = background_color(uv);
    else
	{
		float3 startRayPos = rayPos;
		if(intersect.x > 0.0)
			startRayPos += rayDir * (intersect.x + EPSILON);

		startRayPos -= volumeMin;
		startRayPos /= (volumeMax - volumeMin);

		IntersectVolumeOut result = intersect_volume(startRayPos, rayDir, invRayDir);

		if(result.hit)
		{
			float maxDepthClip = u_srcDepthTexture.SampleLevel(sampleru_srcDepthTexture, uv, 0);
			float maxDepth = LinearEyeDepth(maxDepthClip);

			float3 hitPos = result.hitPos;
			hitPos *= (volumeMax - volumeMin);
			hitPos += volumeMin;
			hitPos = mul(u_model, float4(hitPos, 1.0)).xyz;

			float traceDepth = -UnityWorldToViewPos(hitPos).z;

			if(maxDepth < traceDepth)
				color = background_color(uv);
			else
				color = result.color;
		}
		else
			color = background_color(uv);
	}

    //write final color:
	//---------------
    u_outTexture[writePos] = float4(color, 1.0);
}
