#pragma kernel main

#define WORKGROUP_SIZE_X 8
#define WORKGROUP_SIZE_Y 8

//-------------------------//

RWTexture2D<float4> u_outTexture;
uint2 u_outTextureDims;

float4x4 u_invView;
float4x4 u_invProj;

//-------------------------//

float3 background_color(float3 rayDir)
{
	float a = rayDir.y * 0.5 + 0.5;
	return lerp(float3(0.71, 0.85, 0.90), float3(0.00, 0.45, 0.74), a);
}

//-------------------------//

[numthreads(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
    //skip pixels out of texture bounds (happens due to workgroup size):
	//---------------
    uint2 writePos = id.xy;
    if(writePos.x >= u_outTextureDims.x || writePos.y >= u_outTextureDims.y)
        return;

    //generate ray pos + dir:
	//---------------
    float2 pixelCenter = float2((float)writePos.x, (float)writePos.y) + float2(0.5, 0.5);
    float2 uv = pixelCenter / float2(u_outTextureDims);
	float2 d = uv * 2.0 - 1.0;

	float4 rayPos4 = mul(u_invView, float4(0.0, 0.0, 0.0, 1.0));
	float4 rayTarget = mul(u_invProj, float4(d.x, d.y, 1.0, 1.0));

	float4 rayDir4 = mul(u_invView, float4(normalize(rayTarget.xyz), 0.0));

	float3 rayPos = rayPos4.xyz;
	float3 rayDir = normalize(rayDir4.xyz);
    float3 invRayDir = 1.0 / rayDir;

    //get color (temp!):
	//---------------    
    float3 color = background_color(rayDir);

    //write final color:
	//---------------
    u_outTexture[writePos] = float4(color, 1.0);
}
